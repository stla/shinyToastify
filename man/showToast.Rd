% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toastify.R
\name{showToast}
\alias{showToast}
\title{Show a toast}
\usage{
showToast(
  session,
  input,
  text,
  type = "default",
  position = "top-right",
  transition = "slide",
  autoClose = 5000,
  hideProgressBar = FALSE,
  newestOnTop = FALSE,
  closeOnClick = TRUE,
  rtl = FALSE,
  pauseOnFocusLoss = TRUE,
  draggable = TRUE,
  draggableDirection = "x",
  pauseOnHover = TRUE,
  Rcallback = function() {     NULL },
  JScallback = NULL
)
}
\arguments{
\item{session}{the Shiny \code{session} object}

\item{input}{the Shiny \code{input} object}

\item{text}{the text displayed in the toast, a character string or an html
element created with the \code{\link[htmltools:HTML]{HTML}} function}

\item{type}{toast type, one of \code{"info"}, \code{"success"},
\code{"warning"}, \code{"error"}, \code{"default"} or \code{"dark"}}

\item{position}{toast position, one of \code{"top-left"},
\code{"top-right"}, \code{"top-center"}, \code{"bottom-left"},
\code{"bottom-right"} or \code{"bottom-center"}}

\item{transition}{the transition effect, one of \code{"slide"},
\code{"zoom"}, \code{"flip"} or \code{"bounce"}}

\item{autoClose}{either a number, the time in ms to close the toast, or
\code{FALSE} to close the toast manually}

\item{hideProgressBar}{Boolean, whether to hide the progress bar}

\item{newestOnTop}{??????}

\item{closeOnClick}{Boolean, whether to dismiss the toast on click}

\item{rtl}{Boolean, right to left}

\item{pauseOnFocusLoss}{Boolean, whether to pause the toast on focus loss}

\item{draggable}{Boolean, ability to drag the toast}

\item{draggableDirection}{\code{"x"} or \code{"y"}}

\item{pauseOnHover}{Boolean, whether to pause the toast on hover}

\item{Rcallback}{a R function without arguments to be executed when the
toast is close}

\item{JScallback}{some JavaScript code given as a string to be executed
when the toast is close}
}
\description{
Show a toast in a Shiny application.
}
\examples{
library(shiny)
library(shinyToastify)

ui <- fluidPage(
  useShinyToastify(),
  br(),
  actionButton("btn", "Show toast", class = "btn-primary btn-lg")
)

server <- function(input, output, session){

  toastTransitions <- c(
    "Zoom", "Bounce", "Flip", "Slide"
  )

  observeEvent(input[["btn"]], {

    toastTransition <- toastTransitions[1L + (input[["btn"]] \%\% 4L)]

    html <- HTML(
      '<span style="font-size: 30px; font-family: cursive;">',
      paste0(toastTransition, " transition"),
      '</span>',
    )

    showToast(
      session,
      input,
      text = html,
      type = "success",
      transition = tolower(toastTransition),
      autoClose = 3000
    )

  })

}

if(interactive()){
  shinyApp(ui, server)
}
}
